Design Decisions:
-DynamicPathfinderGraph is favored over StaticPathfinderGraph, as when we are making
a decision as to what our car needs to do, we need to care about where cars will be next,
not where they are when we do our calculation. This gives our car some sense of predictability
of where other cars will be in a time step.

-DynamicPathfinderGraph is placed as a private instance variable in SmartCarBrain, as SmartCarBrain
will really be the only class using the graph. Our brain will be the one making decisions, so 
it makes sense for it to have direct access to the graph. Other classes don't care about the graph




for a given timestep, when getNextLocations is called, it returns up to 5 nodes:
1 boundary, 2 lane changes, and 2 opportunities.

getNextLocations should be called when Follow returns non-zero (aka enter 'Braking')
for each node:
	if node is in different lane (lane change node),
		are any neighbors in that lane? If so, continue.
		if no neighbors in that lane, take it.
	
	if node is in same lane (boundary or opportunity node),
		determine position to start braking for car ahead.